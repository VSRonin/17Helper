name: Main Platforms
on: 
  push:
    branches:
      - master
      - dev
    paths-ignore:
      - 'docs/**'
      - '**.markdown'
      - '**.md'
      - 'LICENSE'
  pull_request:
    branches:
      - master
      - dev
    paths-ignore:
      - 'docs/**'
      - '**.markdown'
      - '**.md'
      - 'LICENSE'
jobs:
    build:
        name: Build and Test ${{ matrix.os }} Qt ${{ matrix.qt_ver }}
        runs-on: ${{ matrix.os }}
        strategy:
          fail-fast: false
          matrix:
              qt_ver: [5.15.2, 6.2.4]
              os: [windows-latest, ubuntu-latest, macos-latest]
        steps:
          - name: Install Qt
            uses: jurplel/install-qt-action@v2
            with:
              version: ${{ matrix.qt_ver }}
          - name: Git Checkout
            uses: actions/checkout@v2
            with:
              fetch-depth: 0
          - name: Create Build Directory
            shell: pwsh
            run: |
              mkdir build
              cd build
          - name: Set up MSVC environment
            if: ${{ runner.os == 'Windows' }}
            uses: ilammy/msvc-dev-cmd@v1
          - name: Install Windows Dependencies
            if: ${{ runner.os == 'Windows' }}
            run: |
                choco install openssl
          - name: Install Linux Dependencies
            if: ${{ runner.os == 'Linux' }}
            run: |
              sudo apt-get update -y
              sudo apt-get install libxcb-icccm4 libxcb-xkb1 libxcb-icccm4 libxcb-image0 libxcb-render-util0 libxcb-randr0 libxcb-keysyms1 libxcb-xinerama0 libxcb-xinput-dev
          - name: Configure
            shell: pwsh
            if: ${{ runner.os != 'Windows' }}
            run: |
              cd build
              cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTING=OFF -DBUILD_MODELSERIALISATION=OFF -DBUILD_INSERTPROXY=OFF -DBUILD_ROOTINDEXPROXY=OFF -DBUILD_GENERICMODEL=OFF -DCMAKE_INSTALL_PREFIX="../installed" ../
          - name: Configure Windows
            shell: pwsh
            if: ${{ runner.os == 'Windows' }}
            run: |
              cd build
              cmake -G"NMake Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTING=OFF -DBUILD_MODELSERIALISATION=OFF -DBUILD_INSERTPROXY=OFF -DBUILD_ROOTINDEXPROXY=OFF -DBUILD_GENERICMODEL=OFF -DOPENSSL_ROOT_DIR="C:/Program Files/OpenSSL" -DCMAKE_INSTALL_PREFIX="../installed" ../
          - name: Build and Install
            shell: pwsh
            run: |
              cd build
              cmake --build .
              cmake --build . --target install